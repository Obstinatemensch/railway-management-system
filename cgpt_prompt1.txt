Follow these points carefully.

1. I am working on a project on railway management system.
2. I plan to work with sqlalchemy for backend interaction with postgresql and tkinter for the gui.
3. I have the following code (which will be sent to you in the next message after your acknowledgement reply to this message). This code can not be modified, and db has to be used for all interactions with postgresql. That is, only functions like db.execute_ddl_and_dml_commands(...) and db.execute_dql_commands(...) can be used for the project, considering db as some black box.
4. You have to supply me CONTINUATION of the code which I'll send in the next message after your acknowledgement reply to this message, not a new python file. By CONTINUATION, I mean using variables declared here freely, and do not print what ever I sent to you.
Features I want to be implemented.
5.1. In the starting screen trains between stations needs to be there in a good gui format. (source txt box, destination txt box, day dropdown). The following is already implemented in the connected database:
create OR REPLACE function TrainsBtwStns (
   src_id VARCHAR(6),
   dst_id VARCHAR(6),
   day INT              -- 0:Mon ... 6:Sun
)
returns table (train_no INT, src_stn_id varchar(6), dest_stn_id varchar(6),
days_of_wk int, src_arr_time time, src_dep_time time, dest_arr_time time,
dest_dep_time time,dayNum INT)
language plpgsql
as $$
begin
RETURN QUERY
SELECT
s1.train_no,s1.stn_id,s2.stn_id,s1.days_of_wk,s1.arr_time,s1.dep_time,s2.ar
r_time,s2.dep_time,s2."Dayofjny"-s1."Dayofjny" FROM Schedule as s1 cross
join Schedule as s2 where (s1.days_of_wk&(1<<day))>0 and
s1.train_no=s2.train_no and s1.stn_id=src_id and s2.stn_id=dst_id and
(s1."Dayofjny"<s2."Dayofjny" or (s1."Dayofjny"=s2."Dayofjny" and
s1.dep_time<s2.arr_time));
end; $$;

-- can call like this
SELECT * FROM TrainsBtwStns('ERS', 'CLT', 1); -- 0:Mon ... 6:Sun
5.2. Login button which leads to login screen, wherein reservation clerk and any general user can login.

6. Rest of features will be given in due course of time.

7. Do not give the whole code at once. Send at max 1000 characters in one message, then send "word limit reached". Continue it if I reply "continue".

Please acknowledge "ok" so that I can provide you with the contents in my start.py (as described above).


------
after_ok
------

from tkinter import *
from tkinter import messagebox
import sqlalchemy


root = Tk()
root.title("railway-management-system")
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
scrSizeStr=str(int(screen_width))+'x'+str(int(screen_height))
root.geometry(scrSizeStr)


class PostgresqlDB:
    def __init__(self,user_name,password,host,port,db_name):
        self.user_name = user_name
        self.password = password
        self.host = host
        self.port = port
        self.db_name = db_name
        self.engine = self.create_db_engine()

    def create_db_engine(self):
        try:
            db_uri = f"postgresql+psycopg2://{self.user_name}:{self.password}@{self.host}:{self.port}/{self.db_name}"
            return create_engine(db_uri)
        except Exception as err:
            raise RuntimeError(f'Failed to establish connection -- {err}') from err

    def execute_dql_commands(self,stmnt,values=None):
        try:
            with self.engine.connect() as conn:
                if values is not None:
                    result = conn.execute(text(stmnt),values)
                else:
                    result = conn.execute(text(stmnt))
            return result
        except Exception as err:
            print(f'Failed to execute dql commands -- {err}')
    
    def execute_ddl_and_dml_commands(self,stmnt,values=None):
        connection = self.engine.connect()
        trans = connection.begin()
        try:
            if values is not None:

                result = connection.execute(text(stmnt),values)
            else:
                result = connection.execute(text(stmnt))
            trans.commit()
            connection.close()
            print('Command executed successfully.')
        except Exception as err:
            trans.rollback()
            print(f'Failed to execute ddl and dml commands -- {err}')

USER_NAME = 'postgres'
PASSWORD = 'postgres'
PORT = 5432
DATABASE_NAME = 'railwaymanagementsys'
HOST = 'localhost'

db = PostgresqlDB(user_name=USER_NAME,
                    password=PASSWORD,
                    host=HOST,port=PORT,
                    db_name=DATABASE_NAME)
engine = db.engine


-----
-----
create gui as a CONTINUATION to the code which I gave in the previous prompt.

